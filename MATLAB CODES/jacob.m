function [EIG,om1,om2] = jacob(y)
% This function creates a 5x5 matrix and it checks directly the eigenvalues
% it finds the maximum real part of the eigenvalues
% this function get omega1 and omega2 as outputs too

%NOTE: zita means ksi, delta means lambda

global  r kappa  a ps kappap kappav kappas
syms zita1 zita2 thetaf1 thetaf2 rho h  k delta L
psi =sym("psi");
ks=sym("ks");
kp=sym("kp");
kv=sym("kv");
alpha=sym("alpha");

%% dksi1/dt
ksi1dot=sin(thetaf1)+(1/24).*exp(1).^((sqrt(-1)*(-1)).*thetaf2).*pi.^2.*rho.^2.*(( ...
  sqrt(-1)*(-3)).*psi.*(csch((1/2).*pi.*(delta+sqrt(-1).*(zita1+(-1).*zita2))) ...
  .^2+sech((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+zita2))).^2)+(sqrt(-1)*3) ...
  .*exp(1).^((sqrt(-1)*2).*thetaf2).*psi.*(csch((1/2).*pi.*(delta+(sqrt(-1)*( ...
  -1)).*(zita1+(-1).*zita2))).^2+sech((1/2).*pi.*(delta+sqrt(-1).*(zita1+zita2))) ...
  .^2)+(-2).*exp(1).^(sqrt(-1).*thetaf2).*((-1)+3.*sec(pi.*zita1).^2).*sin( ...
  thetaf1));
%% dksi2/dt
ksi2dot=(sqrt(-1)*(-1/8)).*exp(1).^((sqrt(-1)*(-1)).*thetaf1).*pi.^2.*rho.^2.*( csch((1/2).*pi.*...
    (delta+sqrt(-1).*(zita1+(-1).*zita2))).^2+(-1).*exp(1).^(( ...
  sqrt(-1)*2).*thetaf1).*(csch((1/2).*pi.*(delta+(sqrt(-...
1)*(-1)).*zita1+sqrt( ...
  -1).*zita2)).^2+sech((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*...
(zita1+zita2))).^2)+ ...
  sech((1/2).*pi.*(delta+sqrt(-1).*(zita1+zita2))).^2)+...
  (1/12).*psi.*(12+pi.^2.* ...
  rho.^2+(-3).*pi.^2.*rho.^2.*sec(pi.*zita2).^2).*sin(thetaf2);
%% lambdadot

lambdadot=(1/24).*(96.*alpha.*zita1.^2+(-96).*alpha.*zita2.^2+(-24).*cos(thetaf1)+2.*pi.^2.* ...
  rho.^2.*cos(thetaf1)+24.*psi.*cos(thetaf2)+(-2).*pi.^2.*rho.^2.*psi.*cos(thetaf2)+6.* ...
  pi.^2.*rho.^2.*cos(thetaf1).*sec(pi.*zita1).^2+(-6).*pi.^2.*rho.^2.*psi.*cos( ...
  thetaf2).*sec(pi.*zita2).^2+(-3).*pi.^2.*rho.^2.*cos(thetaf1).*sech((1/2).*pi.* ...
  (delta+(sqrt(-1)*(-1)).*(zita1+zita2))).^2+3.*pi.^2.*rho.^2.*psi.*cos(thetaf2).* ...
  sech((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+zita2))).^2+(-3).*pi.^2.* ...
  rho.^2.*cos(thetaf1).*sech((1/2).*pi.*(delta+sqrt(-1).*(zita1+zita2))).^2+3.* ...
  pi.^2.*rho.^2.*psi.*cos(thetaf2).*sech((1/2).*pi.*(delta+sqrt(-1).*(zita1+zita2))) ...
  .^2+(sqrt(-1)*(-3)).*pi.^2.*rho.^2.*sech((1/2).*pi.*(delta+(sqrt(-1)*( ...
  -1)).*(zita1+zita2))).^2.*sin(thetaf1)+(sqrt(-1)*3).*pi.^2.*rho.^2.*sech((1/2) ...
  .*pi.*(delta+sqrt(-1).*(zita1+zita2))).^2.*sin(thetaf1)+(sqrt(-1)*(-3)).*pi.^2.* ...
  rho.^2.*psi.*sech((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+zita2))).^2.*sin( ...
  thetaf2)+(sqrt(-1)*3).*pi.^2.*rho.^2.*psi.*sech((1/2).*pi.*(delta+sqrt(-1).*( ...
  zita1+zita2))).^2.*sin(thetaf2)+3.*pi.^2.*rho.^2.*csch((1/2).*pi.*(delta+sqrt(-1) ...
  .*(zita1+(-1).*zita2))).^2.*(cos(thetaf1)+(-1).*psi.*cos(thetaf2)+(sqrt(-1)*(-1)) ...
  .*(sin(thetaf1)+(-1).*psi.*sin(thetaf2)))+3.*pi.^2.*rho.^2.*csch((1/2).*pi.*( ...
  delta+(sqrt(-1)*(-1)).*(zita1+(-1).*zita2))).^2.*(cos(thetaf1)+(-1).*psi.*cos(thetaf2) ...
  +sqrt(-1).*(sin(thetaf1)+(-1).*psi.*sin(thetaf2))));

%% T-DIPOLE

theta1dot=(1/8).*exp(1).^((sqrt(-1)*(-1)).*(thetaf1+thetaf2)).*(64.*exp(1).^(sqrt( ...
  -1).*(thetaf1+thetaf2)).*alpha.*k.*zita1+64.*exp(1).^(sqrt(-1).*(thetaf1+thetaf2)).*alpha.* ...
  zita1.*cos(thetaf1).^2+(sqrt(-1)*(-1)).*exp(1).^((sqrt(-1)*3).*thetaf1+(sqrt( ...
  -1)*2).*thetaf2).*pi.^3.*rho.^2.*psi.*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).* ...
  (zita1+(-1).*zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+(-1).*zita2) ...
  )).^2+sqrt(-1).*exp(1).^((sqrt(-1)*(-1)).*thetaf1).*pi.^3.*rho.^2.*psi.* ...
  coth((1/2).*pi.*(delta+sqrt(-1).*(zita1+(-1).*zita2))).*csch((1/2).*pi.*(delta+ ...
  sqrt(-1).*(zita1+(-1).*zita2))).^2+(sqrt(-1)*(-1)).*exp(1).^(sqrt(-1).* ...
  thetaf1).*pi.^3.*rho.^2.*psi.*cos(thetaf1).^2.*coth((1/2).*pi.*(delta+(sqrt(-1)*( ...
  -1)).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))) ...
  .^2+sqrt(-1).*exp(1).^(sqrt(-1).*(thetaf1+2.*thetaf2)).*pi.^3.*rho.^2.*psi.* ...
  cos(thetaf1).^2.*coth((1/2).*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2) ...
  .*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).^2+sqrt(-1).*exp(1).^(sqrt(-1).* ...
  thetaf1).*pi.^3.*rho.^2.*psi.*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+ ...
  zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))).^2.*sin( ...
  thetaf1).^2+(sqrt(-1)*(-1)).*exp(1).^(sqrt(-1).*(thetaf1+2.*thetaf2)).*pi.^3.* ...
  rho.^2.*psi.*coth((1/2).*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2).* ...
  pi.*(delta+sqrt(-1).*(1+zita1+zita2))).^2.*sin(thetaf1).^2+exp(1).^(sqrt(-1).* ...
  thetaf1).*pi.^3.*rho.^2.*psi.*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+ ...
  zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))).^2.*sin(2.* ...
  thetaf1)+exp(1).^(sqrt(-1).*(thetaf1+2.*thetaf2)).*pi.^3.*rho.^2.*psi.*coth((1/2) ...
  .*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+sqrt(-1).*(1+ ...
  zita1+zita2))).^2.*sin(2.*thetaf1)+(1/2).*exp(1).^(sqrt(-1).*thetaf2).*pi.^3.* ...
  rho.^2.*sec(pi.*zita1).^2.*tan(pi.*zita1)+(-1/2).*exp(1).^(sqrt(-1).*(4.* ...
 thetaf1+thetaf2)).*pi.^3.*rho.^2.*sec(pi.*zita1).^2.*tan(pi.*zita1)+exp(1).^(sqrt( ...
  -1).*thetaf2).*pi.^3.*rho.^2.*cos(thetaf1).^2.*sec(pi.*zita1).^2.*tan(pi.*zita1)+ ...
  exp(1).^(sqrt(-1).*(2.*thetaf1+thetaf2)).*pi.^3.*rho.^2.*cos(thetaf1).^2.*sec( ...
  pi.*zita1).^2.*tan(pi.*zita1)+(sqrt(-1)*2).*exp(1).^(sqrt(-1).*thetaf2).* ...
  pi.^3.*rho.^2.*cos(thetaf1).*sec(pi.*zita1).^2.*sin(thetaf1).*tan(pi.*zita1)+(-1) ...
  .*exp(1).^(sqrt(-1).*thetaf2).*pi.^3.*rho.^2.*sec(pi.*zita1).^2.*sin(thetaf1) ...
  .^2.*tan(pi.*zita1)+(-1).*exp(1).^(sqrt(-1).*(2.*thetaf1+thetaf2)).*pi.^3.* ...
  rho.^2.*sec(pi.*zita1).^2.*sin(thetaf1).^2.*tan(pi.*zita1))+ks*sin(thetaf1)+(1+(-1).*cos(thetaf2+atan(delta.^(-1).*(zita1+(-1).*zita2)))).*(kv.*psi.*sin(thetaf1+( ...
  -1).*thetaf2)+kp.*(delta.^2+(zita1+(-1).*zita2).^2).^(1/2).*sin(thetaf2+atan(delta.^(-1) ...
  .*(zita1+(-1).*zita2))));

% thetaf2dot

theta2dot=(1/8).*exp(1).^((sqrt(-1)*(-1)).*(thetaf1+thetaf2)).*(64.*exp(1).^(sqrt( ...
  -1).*(thetaf1+thetaf2)).*alpha.*k.*zita2+64.*exp(1).^(sqrt(-1).*(thetaf1+thetaf2)).*alpha.* ...
  zita2.*cos(thetaf2).^2+sqrt(-1).*exp(1).^((sqrt(-1)*2).*thetaf1+(sqrt(-1)*3) ...
  .*thetaf2).*pi.^3.*rho.^2.*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+(-1) ...
  .*zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(zita1+(-1).*zita2))).^2+( ...
  sqrt(-1)*(-1)).*exp(1).^((sqrt(-1)*(-1)).*thetaf2).*pi.^3.*rho.^2.*coth( ...
  (1/2).*pi.*(delta+sqrt(-1).*(zita1+(-1).*zita2))).*csch((1/2).*pi.*(delta+sqrt( ...
  -1).*(zita1+(-1).*zita2))).^2+(sqrt(-1)*(-1)).*exp(1).^(sqrt(-1).*(2.* ...
  thetaf1+thetaf2)).*pi.^3.*rho.^2.*cos(thetaf2).^2.*coth((1/2).*pi.*(delta+(sqrt(-1)* ...
  (-1)).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2)) ...
  ).^2+sqrt(-1).*exp(1).^(sqrt(-1).*thetaf2).*pi.^3.*rho.^2.*cos(thetaf2).^2.* ...
  coth((1/2).*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+sqrt( ...
  -1).*(1+zita1+zita2))).^2+(-2).*exp(1).^(sqrt(-1).*(2.*thetaf1+thetaf2)).* ...
  pi.^3.*rho.^2.*cos(thetaf2).*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+ ...
  zita2))).*csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))).^2.*sin( ...
  thetaf2)+(-2).*exp(1).^(sqrt(-1).*thetaf2).*pi.^3.*rho.^2.*cos(thetaf2).*coth(( ...
  1/2).*pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+sqrt(-1).*( ...
  1+zita1+zita2))).^2.*sin(thetaf2)+sqrt(-1).*exp(1).^(sqrt(-1).*(2.*thetaf1+thetaf2)) ...
  .*pi.^3.*rho.^2.*coth((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))).* ...
  csch((1/2).*pi.*(delta+(sqrt(-1)*(-1)).*(1+zita1+zita2))).^2.*sin(thetaf2).^2+( ...
  sqrt(-1)*(-1)).*exp(1).^(sqrt(-1).*thetaf2).*pi.^3.*rho.^2.*coth((1/2).* ...
  pi.*(delta+sqrt(-1).*(1+zita1+zita2))).*csch((1/2).*pi.*(delta+sqrt(-1).*(1+zita1+ ...
  zita2))).^2.*sin(thetaf2).^2+(1/2).*exp(1).^(sqrt(-1).*thetaf1).*pi.^3.* ...
  rho.^2.*psi.*sec(pi.*zita2).^2.*tan(pi.*zita2)+(-1/2).*exp(1).^(sqrt(-1).*( ...
  thetaf1+4.*thetaf2)).*pi.^3.*rho.^2.*psi.*sec(pi.*zita2).^2.*tan(pi.*zita2)+exp(1) ...
  .^(sqrt(-1).*thetaf1).*pi.^3.*rho.^2.*psi.*cos(thetaf2).^2.*sec(pi.*zita2).^2.* ...
  tan(pi.*zita2)+exp(1).^(sqrt(-1).*(thetaf1+2.*thetaf2)).*pi.^3.*rho.^2.*psi.*cos( ...
  thetaf2).^2.*sec(pi.*zita2).^2.*tan(pi.*zita2)+(sqrt(-1)*2).*exp(1).^(sqrt( ...
  -1).*thetaf1).*pi.^3.*rho.^2.*psi.*cos(thetaf2).*sec(pi.*zita2).^2.*sin(thetaf2).* ...
  tan(pi.*zita2)+(-1).*exp(1).^(sqrt(-1).*thetaf1).*pi.^3.*rho.^2.*psi.*sec( ...
  pi.*zita2).^2.*sin(thetaf2).^2.*tan(pi.*zita2)+(-1).*exp(1).^(sqrt(-1).*( ...
  thetaf1+2.*thetaf2)).*pi.^3.*rho.^2.*psi.*sec(pi.*zita2).^2.*sin(thetaf2).^2.*tan( ...
  pi.*zita2))+ks*psi*sin(thetaf2)+(1+(-1).*cos(thetaf2+atan(delta.^(-1).*(zita1+(-1).*zita2)))).*(kv.*psi.*sin(thetaf1+( ...
  -1).*thetaf2)+kp.*(delta.^2+(zita1+(-1).*zita2).^2).^(1/2).*sin(thetaf2+atan(delta.^(-1) ...
  .*(zita1+(-1).*zita2))));

% Jacobian 5x5: state matrix
A=jacobian([ksi1dot,ksi2dot,theta1dot,theta2dot,lambdadot],[zita1,zita2,thetaf1,thetaf2,delta]);
A1 = subs(A,[rho,k,alpha,psi,ks,kp,kv], [r,kappa,a,ps,kappas,kappap,kappav]); %substitute parameters
A2 = double(subs(A1,[zita1,zita2,delta,thetaf1,thetaf2], [y(1),y(2),y(3),y(4),y(5)])); %substitute variables
eigenval = eigs(A2,5,'largestreal'); % sort from highest to lower 
maxeig=double(real(eigenval(1))); %take the max real part of the first element of the array (which is the maxeig)

tol=10^-5;
if maxeig<-tol % max eig is negative 
    EIG=1; %(OUTPUT)
elseif abs(maxeig)<tol % max eig is zero
    EIG=2; %(OUTPUT)
else % max eig is positive 
    EIG=0; %(OUTPUT)
end

yo=eig(A2); %eigenvalues
om1=abs(imag(yo(1))); %frequency 1 (OUTPUT)
om2=abs(imag(yo(3))); %frequency 2 (OUTPUT)

[RE,eigenvalues,LE] = eig(A2); %DISPLAY LEFT RIGHT EIGENVECTORS AND EIGENVALUES

end